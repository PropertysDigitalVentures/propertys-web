{"version":3,"sources":["webpack:///src/app/rent/rent.component.html","webpack:///src/app/rent/rent.component.ts","webpack:///src/app/rent/rent.module.ts","webpack:///src/app/shared/dialogs/brix-contract-approval-dialog/brix-contract-approval-dialog.component.html","webpack:///src/app/shared/dialogs/brix-contract-approval-dialog/brix-contract-approval-dialog.component.ts","webpack:///src/app/shared/dialogs/brix-contract-approval-dialog/brix-contract-approval-dialog.module.ts"],"names":["RentComponent","smartContractCoreService","eventMessengerService","_dialog","streetViewToggled","districtViewToggled","cityViewToggled","brixClaimLoading","brixTokenApproved","propertys","accounts","countdownHours","countdownMins","countdownSecs","countdownTimer","setInterval","updateCountdownTimer","checkMetaMaskInstalled","checkChain","subscribe","event","data","loadPropertys","type","isMetaMaskInstalled","provider","getNetwork","chainId","isOnMainnet","loading","getWalletAccounts","open","width","endDate","now","Date","t","Math","floor","toString","padStart","street","length","buyOnOpenSeaArray","i","push","image","replace","getNFTsFromAddress","streetData","concat","allUnits","map","property","propertyObj","image_preview_url","traits","trait","trait_type","value","forEach","propertyExists","singleProperty","streetName","units","streets","splice","console","log","toggleContainerType","claimBrix","RentModule","provide","useValue","forChild","path","component","BrixContractApprovalDialogComponent","_data","dialogRef","close","approveBrix","BrixContractApprovalDialogModule"],"mappings":"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","file":"rent-rent-module-es5.js","sourcesContent":["<propertys-header></propertys-header>\r\n\r\n<div class=\"wrapper\">\r\n\t<h1>Claim $BRIX</h1>\r\n\t<div class=\"window-text\">Window for claiming ends in {{countdownHours}}:{{countdownMins}}:{{countdownSecs}}</div>\r\n\r\n\t<!-- Streets -->\r\n\t<div class=\"property-type-container\">\r\n\t\t<div class=\"property-type-title\">\r\n\t\t\t<h3>Streets</h3>\r\n\t\t\t<div class=\"info-and-actions\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li class=\"complete\">\r\n\t\t\t\t\t\t<div class=\"total\">1</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">Completed </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<div class=\"total\">3</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">In Progress </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<button class=\"toggle-view-btn\" (click)=\"toggleContainerType('street')\">\r\n\t\t\t\t\t<i *ngIf=\"streetViewToggled\" class=\"fas fa-chevron-up\"></i>\r\n\t\t\t\t\t<i *ngIf=\"!streetViewToggled\" class=\"fas fa-chevron-down\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<ng-container  *ngIf=\"streetViewToggled\">\r\n\t\t\t<div *ngFor=\"let property of propertys\">\r\n\t\t\t\t<div class=\"property-list-container\" *ngFor=\"let street of property['streets']\">\r\n\t\t\t\t\t<div class=\"info\">\r\n\t\t\t\t\t\t<!-- Complete -->\r\n\t\t\t\t\t\t<div *ngIf=\"isStreetComplete(street)\" class=\"status-icon complete\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-check\"></i>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<!-- In progress -->\r\n\t\t\t\t\t\t<div *ngIf=\"!isStreetComplete(street)\" class=\"status-icon\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-tasks\"></i>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t\t\t<div class=\"title-text\">Name</div>\r\n\t\t\t\t\t\t\t<div class=\"name\">{{property['streetName']}}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t\t\t<div class=\"title-text\" *ngIf=\"isStreetComplete(street)\">Amount Earned</div>\r\n\t\t\t\t\t\t\t<div class=\"title-text\" *ngIf=\"!isStreetComplete(street)\">Amount to Earn</div>\r\n\t\t\t\t\t\t\t<div class=\"amount-to-earn earned\"\r\n\t\t\t\t\t\t\t\t[class]=\"{'earned': isStreetComplete(street) }\"\r\n\t\t\t\t\t\t\t>320 BRIX</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ul class=\"street-blocks\">\r\n\t\t\t\t\t\t<li *ngFor=\"let unit of street\">\r\n\t\t\t\t\t\t\t<img [src]=\"unit.image\" width=\"100%\" />\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li *ngFor=\"let buyButton of buildBuyButtonsForStreet(street)\">\r\n\t\t\t\t\t\t\t<a target=\"_blank\" href=\"https://opensea.io/collection/propertysofficial?search[sortAscending]=true&search[sortBy]=PRICE&search[stringTraits][0][name]=Street%20Name&search[stringTraits][0][values][0]={{buyButton.street}}\" class=\"buy-card-btn\">\r\n\t\t\t\t\t\t\t\t<img [src]=\"buyButton.image\" width=\"100%\" />\r\n\t\t\t\t\t\t\t\t<span class=\"buy-text\">Buy on Opensea</span>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</ng-container>\r\n\t</div>\r\n\r\n\t<!-- Districts -->\r\n\t<div class=\"property-type-container\">\r\n\t\t<div class=\"property-type-title\">\r\n\t\t\t<h3>Districts</h3>\r\n\t\t\t<div class=\"info-and-actions\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li class=\"complete\">\r\n\t\t\t\t\t\t<div class=\"total\">1</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">Completed </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<div class=\"total\">3</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">In Progress </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<button class=\"toggle-view-btn\" (click)=\"toggleContainerType('district')\">\r\n\t\t\t\t\t<i *ngIf=\"districtViewToggled\" class=\"fas fa-chevron-up\"></i>\r\n\t\t\t\t\t<i *ngIf=\"!districtViewToggled\" class=\"fas fa-chevron-down\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"property-list-container\" *ngIf=\"districtViewToggled\">\r\n\t\t\t<div class=\"info\">\r\n\t\t\t\t<div class=\"status-icon\">\r\n\t\t\t\t\t<i class=\"fas fa-tasks\"></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t<div class=\"title-text\">Name</div>\r\n\t\t\t\t\t<div class=\"name\">Muddy Mountains</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t<div class=\"title-text\">Amount to earn</div>\r\n\t\t\t\t\t<div class=\"amount-to-earn\">2100 BRIX</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<ul class=\"street-blocks\">\r\n\t\t\t\t<li><img src=\"/assets/images/cards/beige-bay-1.webp\" width=\"100%\" /></li>\r\n\t\t\t\t<li><img src=\"/assets/images/cards/beige-bay-1.webp\" width=\"100%\" /></li>\r\n\t\t\t</ul>\r\n\t\t\t<a target=\"_blank\" href=\"https://opensea.io/collection/propertysofficial?search[sortAscending]=true&search[sortBy]=PRICE&search[stringTraits][0][name]=City%20Name&search[stringTraits][0][values][0]=Beige%20Bay\" class=\"buy-more\">Buy 2 more streets in this district for completion</a>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\r\n\t<!-- Cities -->\r\n\t<div class=\"property-type-container\">\r\n\t\t<div class=\"property-type-title\">\r\n\t\t\t<h3>Cities</h3>\r\n\t\t\t<div class=\"info-and-actions\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li class=\"complete\">\r\n\t\t\t\t\t\t<div class=\"total\">1</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">Completed </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<div class=\"total\">3</div> \r\n\t\t\t\t\t\t<div class=\"total-text\">In Progress </div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<button class=\"toggle-view-btn\" (click)=\"toggleContainerType('city')\">\r\n\t\t\t\t\t<i *ngIf=\"cityViewToggled\" class=\"fas fa-chevron-up\"></i>\r\n\t\t\t\t\t<i *ngIf=\"!cityViewToggled\" class=\"fas fa-chevron-down\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"property-list-container\" *ngIf=\"cityViewToggled\">\r\n\t\t\t<div class=\"info\">\r\n\t\t\t\t<div class=\"status-icon\">\r\n\t\t\t\t\t<i class=\"fas fa-tasks\"></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t<div class=\"title-text\">Name</div>\r\n\t\t\t\t\t<div class=\"name\">Beige Bay</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"column\">\r\n\t\t\t\t\t<div class=\"title-text\">Amount to earn</div>\r\n\t\t\t\t\t<div class=\"amount-to-earn\">15,500 BRIX</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<ul class=\"street-blocks\">\r\n\t\t\t\t<li><img src=\"/assets/images/cards/beige-bay-1.webp\" width=\"100%\" /></li>\r\n\t\t\t</ul>\r\n\t\t\t<a target=\"_blank\" href=\"https://opensea.io/collection/propertysofficial?search[sortAscending]=true&search[sortBy]=PRICE&search[stringTraits][0][name]=City%20Name&search[stringTraits][0][values][0]=Beige%20Bay\" class=\"buy-more\">Buy 6 more streets in this city for completion</a>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<!-- Totals to earn -->\r\n\t<div class=\"rent-collection-summary-container\">\r\n\t\t<div class=\"top\">\r\n\t\t\t<h2>Total Brix to Claim</h2>\r\n\t\t\t<div class=\"brix-total\">2500 BRIX</div>\r\n\t\t</div>\r\n\t\t<button [disabled]=\"brixClaimLoading\" (click)=\"claimBrix()\" class=\"claim-all-btn\">\r\n\t\t\t<span *ngIf=\"!brixClaimLoading\">Claim all</span>\r\n\t\t\t<img *ngIf=\"brixClaimLoading\" src=\"/assets/images/loading.gif\" width=\"50\"  />\r\n\t\t</button>\r\n\t\t<div class=\"wallet-balance\">\r\n\t\t\tIn your wallet \r\n\t\t\t<span class=\"total\">\r\n\t\t\t\t<!-- <img src=\"/assets/images/brix-icon.png\" width=\"16\" /> -->\r\n\t\t\t\t436\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n<propertys-footer></propertys-footer>","// @ts-nocheck\r\nimport { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BrixContractApprovalDialogComponent } from '../shared/dialogs/brix-contract-approval-dialog/brix-contract-approval-dialog.component';\r\nimport { SmartContractCoreService } from '../shared/services/smart-contract-core.service';\r\nimport { EventMessengerService } from '../shared/services/event-messenger.service';\r\nimport { environment } from '../../environments/environment';\r\nimport { PropertyBinding } from 'three';\r\n\r\n@Component({\r\n  selector: 'app-rent',\r\n  templateUrl: './rent.component.html',\r\n  styleUrls: ['./rent.component.scss']\r\n})\r\nexport class RentComponent {\r\n  public streetViewToggled = true;\r\n  public districtViewToggled = true;\r\n  public cityViewToggled = true;\r\n  public brixClaimLoading = false;\r\n  public brixTokenApproved = true; // Need to dynamically set this based on smart contract\r\n  public propertys = []; // Breakdown of the streets\r\n\r\n  public accounts = [];\r\n\r\n  // Countdown\r\n  public countdownTimer;\r\n  public countdownHours: any = 0;\r\n  public countdownMins: any = 0;\r\n  public countdownSecs: any = 0;\r\n\r\n  constructor(\r\n    public smartContractCoreService: SmartContractCoreService,\r\n    public eventMessengerService: EventMessengerService,\r\n    private _dialog: MatDialog,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n        // Initialize the countdown\r\n    this.countdownTimer = setInterval(() => {\r\n\t\t\tthis.updateCountdownTimer();\r\n\t\t}, 1000);\r\n\t\tthis.updateCountdownTimer();\r\n\r\n    \r\n\r\n\r\n     // Startup: Check metamask and populate accounts and then determine if any unis are in wallet\r\n     await this.checkMetaMaskInstalled();\r\n\r\n     // Make sure we're on the right chain\r\n     await this.checkChain();\r\n \r\n \r\n     // Handle events when wallet accounts change\r\n     this.eventMessengerService.subscribe('accountsChanged', async (event) => {\r\n       let { accounts } = event.data;\r\n       this.accounts = accounts;\r\n       await this.checkChain();\r\n     });\r\n \r\n     // Handle events when wallet accounts get disconnectd\r\n     this.eventMessengerService.subscribe('disconnect', async (event: any) => {\r\n       let { accounts } = event.data;\r\n       this.accounts = accounts;\r\n       await this.checkChain();\r\n     })\r\n\r\n     this.loadPropertys();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Toggle the container type\r\n   */\r\n  toggleContainerType(type) {\r\n    switch(type) {\r\n\r\n      case \"street\":\r\n        this.streetViewToggled = !this.streetViewToggled;\r\n      break;\r\n      case \"neighborhood\":\r\n        this.districtViewToggled = !this.districtViewToggled;\r\n        break;\r\n      case \"district\":\r\n        this.cityViewToggled = !this.cityViewToggled;\r\n      break;\r\n    }\r\n  }\r\n\r\n\r\n   /**\r\n\t * Make sure we are on the correct chain\r\n\t */\r\n\tasync checkChain() {\r\n\t\tif(this.smartContractCoreService.isMetaMaskInstalled()) {\r\n\t\t\tconst { chainId } = await this.smartContractCoreService.provider.getNetwork()\r\n\t\t\tif(environment.chainId === chainId) {\r\n\t\t\t\tthis.isOnMainnet = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.isOnMainnet = false;\r\n\t\t\t\tthis.loading = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isOnMainnet = false;\r\n\t\t\tthis.loading = false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n  /**\r\n\t * Ensure metamask is installed so we can get wallet information\r\n\t */\r\n\tasync checkMetaMaskInstalled() {\r\n\t\tif(this.smartContractCoreService.isMetaMaskInstalled()) {\r\n\t\t  this.isMetaMaskInstalled = true;\r\n\t\t  this.accounts = await this.smartContractCoreService.getWalletAccounts();\r\n\t\t} else {\r\n\t\t  this.isMetaMaskInstalled = false;\r\n\t\t}\r\n\t}\r\n\r\n  \r\n  /**\r\n   * Claim Brix button\r\n   */\r\n   public claimBrix() {\r\n\r\n    // If token hasn't been approved, show modal to approve it\r\n    if(this.brixTokenApproved) {\r\n      this._dialog.open(BrixContractApprovalDialogComponent, {\r\n          width: '630px',\r\n          data: {\r\n            accounts: this.accounts\r\n          }\r\n      });\r\n    } else {\r\n      this.brixClaimLoading = true;\r\n    }\r\n}\r\n\r\n\r\n  /**\r\n   *  Countdown for current window\r\n\t */\r\n\tpublic updateCountdownTimer() {\r\n\t\tlet endDate = 1659902000000; // Update this with the end time in milliseconds\r\n\t\tlet now = Date.now()\r\n\t\tlet t = endDate - now;\r\n\t\t\r\n\t\tif (t >= 0) {\r\n\t\t\tthis.countdownHours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)).toString().padStart(2, '0');\r\n\t\t\tthis.countdownMins = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0');\r\n\t\t\tthis.countdownSecs = Math.floor((t % (1000 * 60)) / 1000).toString().padStart(2, '0');\r\n\t\t} \r\n\t}\r\n\r\n\r\n  \r\n  /**\r\n   * \r\n   * Determine if a street has 7 units\r\n   */\r\n   isStreetComplete(street) {\r\n    return street.length === 7 ? true : false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Build the \"Buy on Opensea\" buttons for each street \r\n   */\r\n  buildBuyButtonsForStreet(street) {\r\n    let buyOnOpenSeaArray = [];\r\n    for(let i = 0; i < (7 - street.length); i++) {\r\n      buyOnOpenSeaArray.push({\r\n        image: street[0]['image'],\r\n        street: street[0]['street'].replace(' ', '%20'),\r\n      });\r\n    }\r\n\r\n    return buyOnOpenSeaArray;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Loads all the propertys for a wallet and then organizes the table breakdown\r\n   */\r\n  public loadPropertys() {\r\n    this.smartContractCoreService\r\n        .getNFTsFromAddress(this.accounts[0])\r\n        .subscribe(async (data) => {\r\n            this.loading = false;\r\n\r\n            // Create some test data\r\n            let streetData = data.concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data).concat(data);\r\n\r\n            // Iterate through the data and build the streets, districts, and cities\r\n            let allUnits = data.map(property => {\r\n\r\n              let propertyObj = {\r\n                image: property.image_preview_url\r\n              };\r\n              for(let trait of property.traits) {\r\n                // Street\r\n                if(trait.trait_type === 'Street Name') {\r\n                 propertyObj['street'] = trait.value;\r\n                }\r\n                // District\r\n                if(trait.trait_type === 'District Name') {\r\n                  propertyObj['district'] = trait.value;\r\n                }\r\n                // City\r\n                if(trait.trait_type === 'City Name') {\r\n                  propertyObj['city'] = trait.value;\r\n                }\r\n                // Unit\r\n                if(trait.trait_type === 'Unit') {\r\n                  propertyObj['unit'] = trait.value;\r\n                }\r\n              }\r\n\r\n              return propertyObj;\r\n            })\r\n\r\n\r\n            // Create entries for each property in order to catalog all streets under a single street object\r\n            allUnits.forEach(property => {\r\n              let propertyExists = false;\r\n              this.propertys.forEach(singleProperty => {\r\n                if(property.street === singleProperty.streetName) {\r\n                  propertyExists = true;\r\n                }\r\n              });\r\n\r\n              if(!propertyExists) {\r\n                this.propertys.push({\r\n                  streetName: property.street,\r\n                  units: [],\r\n                  streets: []\r\n                })\r\n              }\r\n            });\r\n\r\n\r\n            // Now that we know the streets, go through each one and initialize props for each\r\n            allUnits.forEach(property => {\r\n              // Now go through all the propertys\r\n              this.propertys.forEach(singleProperty => {\r\n\r\n                // We have a street match\r\n                if(singleProperty.streetName === property.street) {\r\n                  \r\n                  singleProperty.units.push(property);\r\n                }\r\n              })\r\n            })\r\n\r\n            // Now that we have all the property streets broken down, let's go through and divide them up\r\n            this.propertys.forEach(property => {\r\n              while(property.units.length) {\r\n                property.streets.push(property.units.splice(0,7));\r\n              }\r\n            })\r\n            \r\n            console.log('propertys', this.propertys);\r\n        });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {RouterModule} from '@angular/router';\r\nimport {CommonModule} from '@angular/common';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { RentComponent } from './rent.component';\r\nimport {AppHeaderModule} from '../shared/components/app-header/app-header.module';\r\nimport {AppFooterModule} from '../shared/components/app-footer/app-footer.module';\r\nimport { MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { BrixContractApprovalDialogModule } from '../shared/dialogs/brix-contract-approval-dialog/brix-contract-approval-dialog.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RentComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    AppHeaderModule,\r\n    AppFooterModule,\r\n    MatDialogModule,\r\n    BrixContractApprovalDialogModule,\r\n    RouterModule.forChild([{\r\n      path: '',\r\n      component: RentComponent\r\n  }])\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: MatDialogRef,\r\n      useValue: {}\r\n    },\r\n  ],\r\n  exports: [\r\n    RentComponent\r\n  ],\r\n  bootstrap: [RentComponent]\r\n})\r\nexport class RentModule { }\r\n","\r\n<div class=\"modal\">\r\n    <div class=\"title\">\r\n        <h3>Requesting Permissions</h3>\r\n    </div>\r\n\r\n    <p>We need your approval in order to claim BRIX Tokens</p>\r\n\r\n    <div class=\"actions\">\r\n        <button (click)=\"approveBrix()\" [disabled]=\"loading\" class=\"primary cta\">\r\n            <img *ngIf=\"loading\" src=\"/assets/images/loading.gif\" width=\"24\"  />\r\n            <span *ngIf=\"!loading\">Approve</span>\r\n        </button>\r\n        <button class=\"close\" (click)=\"close()\">Close</button>\r\n    </div>\r\n</div>\r\n","import {Component, Inject} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\n// import { ToastrService } from 'ngx-toastr';\r\nimport {SmartContractCoreService} from '../../services/smart-contract-core.service';\r\n// import {SmartContractBrixService} from '../../services/smart-contract-brix.service';\r\nimport {EventMessengerService} from '../../services/event-messenger.service';\r\n\r\n@Component({\r\n    selector: 'brix-contract-approval-dialog',\r\n    templateUrl: './brix-contract-approval-dialog.component.html',\r\n    styleUrls: ['./brix-contract-approval-dialog.component.scss']\r\n})\r\nexport class BrixContractApprovalDialogComponent {\r\n\r\n    public accounts: any = [];\r\n    public loading: any = false;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public _data: any,\r\n        public dialogRef: MatDialogRef<BrixContractApprovalDialogComponent>,\r\n        public smartContractCoreService: SmartContractCoreService,\r\n        // public smartContractBrixService: SmartContractBrixService,\r\n        public eventMessengerService: EventMessengerService,\r\n        // public toastr: ToastrService,\r\n    ) {\r\n        this.accounts = _data.accounts;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n\r\n    }\r\n\r\n    public async ngOnInit() {\r\n\r\n        // Handle changing account\r\n        this.eventMessengerService.subscribe('metmask.accountsChanged', (event: any) => {\r\n            let { accounts } = event.data;\r\n            this.accounts = accounts;\r\n\r\n            // this.handleMetamaskAccounts();\r\n        })\r\n\r\n        this.eventMessengerService.subscribe('metmask.disconnect', (event: any) => {\r\n                // this.dialogRef.close();\r\n        })\r\n\r\n        // this.handleMetamaskAccounts();\r\n    }\r\n\r\n\r\n    public async handleMetamaskAccounts() {\r\n        if(this.accounts.length == 0) {\r\n            // this.dialogRef.close();\r\n        } else {\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Approve UCD for use with burning for services\r\n     */\r\n    public approveBrix() {\r\n        // this.smartContractBrixService.setApprovalForBrix().then(async (tx: any) => {\r\n\t\t// \tthis.loading = true;\r\n\r\n        //     tx.wait().then((success: any) => {\r\n\t\t// \t\t// Reset quest state\r\n\t\t// \t\tthis.loading = false;\r\n        //         this.close();\r\n        //         this.toastr.success(\"Permissions approved successfully\")\r\n        //     });\r\n\t\t// })\r\n\t\t// .catch(err => {\r\n\t\t// \tthis.loading = false;\r\n\t\t// })\r\n    }\r\n\r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';  \r\nimport { FormsModule } from '@angular/forms';\r\nimport {RouterModule} from '@angular/router';\r\nimport {BrixContractApprovalDialogComponent} from './brix-contract-approval-dialog.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        RouterModule\r\n    ],\r\n    declarations: [BrixContractApprovalDialogComponent],\r\n    exports: [BrixContractApprovalDialogComponent],\r\n    providers: [\r\n    ]\r\n})\r\nexport class BrixContractApprovalDialogModule {}\r\n"]}